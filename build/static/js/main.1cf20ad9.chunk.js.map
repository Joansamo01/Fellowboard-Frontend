{"version":3,"sources":["assets/pin-outline.svg","assets/pin-filled.svg","assets/search.svg","assets/save.svg","assets/edit.svg","assets/cancel.svg","assets/illustration.svg","constants.js","util.js","components/Post.js","components/SearchBar.js","components/Profile.js","store/reducer/index.js","components/Home.js","components/Login.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TAG_COLORS","masonryBreakpoints","default","toHexColor","text","hash","i","length","charCodeAt","Post","props","content","useState","isPinned","setIsPinned","isHovered","setIsHovered","type","toLowerCase","className","href","url","target","description","id","src","thumbnails","timestamp","tags","map","tag","key","style","backgroundColor","numDays","date","dateObj","Date","present","differenceInTime","getTime","Math","floor","abs","getDateDifference","onMouseOver","onMouseLeave","onClick","pin_filled","pin_outline","title","creator","SearchBar","inputValue","setInputValue","query","substring","value","placeholder","onChange","e","onKeyUp","setFilter","search","Profile","discord","setValue","editting","setEditting","save","alert","cancel","edit","fullname","username","getUserPosts","user","proxyUrl","a","avatar_url","login","params","fetch","response","json","posts","console","error","initialState","isLoggedIn","JSON","parse","localStorage","getItem","client_id","process","redirect_uri","client_secret","proxy_url","dbUser","reducer","state","action","setItem","stringify","payload","clear","Home","filter","useContext","AuthContext","dispatch","useEffect","fetchData","to","githubId","avatarUrl","name","allPosts","post","startsWith","find","includes","columnClassName","breakpointCols","Login","errorMessage","isLoading","data","setData","window","location","newUrl","split","history","pushState","requestData","code","method","body","then","catch","createContext","App","useReducer","Provider","path","component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.1cf20ad9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pin-outline.7c3df105.svg\";","module.exports = __webpack_public_path__ + \"static/media/pin-filled.8ce1b2c1.svg\";","module.exports = __webpack_public_path__ + \"static/media/search.8d146a4a.svg\";","module.exports = __webpack_public_path__ + \"static/media/save.2f36ebaa.svg\";","module.exports = __webpack_public_path__ + \"static/media/edit.b5e1292a.svg\";","module.exports = __webpack_public_path__ + \"static/media/cancel.2040f220.svg\";","module.exports = __webpack_public_path__ + \"static/media/illustration.96e41f0b.svg\";","export const TAG_COLORS = [\n    '0F2E4C',\n    '39B995',\n    'F7B929',\n    '1C529E',\n    '263546',\n    'FED330',\n    'DB3A34',\n    '14B5B0',\n];\n\nexport const masonryBreakpoints = {\n    default: 3,\n    '1100': 2,\n    '750': 1,\n}","import { TAG_COLORS } from \"./constants\";\n\n/**\n * Given a date, convert to a integer number of days from now.\n * @param {String or Date} date \n */\nexport const getDateDifference = (date) => {\n    let dateObj = date;\n    if (!(date instanceof Date)) {\n        dateObj = new Date(date);\n    }\n    const present = new Date();\n    const differenceInTime = dateObj.getTime() - present.getTime();\n    return Math.floor(Math.abs(differenceInTime) / (1000 * 3600 * 24));\n}\n\n/**\n * Hashes strings to a hexcolor. Chosen from a predetermined list of colors.\n *\n * @param {String} text: string to hash  \n */\nexport const toHexColor = (text) => {\n    // convert to int\n    let hash = 0;\n    for (let i = 0; i < text.length; i++) {\n        hash += text.charCodeAt(i) + i; // just so order matters\n    }\n\n    hash = hash % TAG_COLORS.length; // get it in range\n    hash = (hash + TAG_COLORS.length) % TAG_COLORS.length; // keep it positive\n    return '#' + TAG_COLORS[hash];\n}","import React, { useState } from 'react';\nimport { getDateDifference, toHexColor } from '../util';\nimport pin_outline from '../assets/pin-outline.svg'; \nimport pin_filled from '../assets/pin-filled.svg'; \n\nfunction Post(props) {\n    const [ isPinned, setIsPinned ] = useState(false); // MADE INTO A STATE FOR TESTING\n    const [ isHovered, setIsHovered ] = useState(isPinned);\n\n    let content;\n    switch(props.type.toLowerCase()) {\n        case \"discord\":\n        case \"text\":\n            content = (\n                <div className='post-body_content text'>\n                    {\"link\" in props.content \n                        && (\n                        <>\n                            &#128279;  \n                            <a href={props.content.url} target=\"_blank\">\n                                Resource \n                            </a>\n                        </>\n                    )}\n                    <p>\n                        {props.content.description}\n                    </p>\n                </div>\n            )\n            break;\n        case \"youtube\":\n            content = (\n            <div className='post-body_content youtube'>\n                <a href={`https://www.youtube.com/watch?v=${props.content.id}`} target=\"_blank\">\n                    &#128279;  \n                    Video link\n                </a>\n                <img \n                    className='post-body_thumbnail' \n                    src={props.content.thumbnails.url}\n                /> \n            </div>\n            );\n            break;\n        default:\n            break; // TODO: account for discord\n    }\n\n    const tags = props.tags.map((tag, i) => \n        <span \n            key={i}\n            className='tag' \n            style={{backgroundColor: toHexColor(tag)}}\n        >\n            {`#${tag}`}\n        </span>\n    );\n\n    let timestamp;\n    const numDays = getDateDifference(props.timestamp);\n    if (numDays === 0) {\n        timestamp = \"today\";\n    } else if (numDays === 1) {\n        timestamp = \"yesterday\";\n    } else {\n        timestamp = numDays + \" days ago\";\n    }\n\n    return (\n        <div \n            className='post'\n            onMouseOver={() => setIsHovered(true)}\n            onMouseLeave={() => setIsHovered(false)}\n        >\n            {(isHovered || isPinned) && (\n                <img \n                    onClick={() => setIsPinned(!isPinned)}\n                    className='post-pin' \n                    src={isPinned ? pin_filled : pin_outline}\n                />\n            )}\n            <section className='post-body'>\n                <div className='post-body_header'>\n                    <h3 className='title'>\n                        {props.title}\n                    </h3>\n                    <label className='creator'>\n                        Shared by {props.creator}\n                    </label>\n                    <label className='time'>\n                        Posted {timestamp}\n                    </label>\n                </div>\n                {content}\n            </section>\n            <section className='post-tags'>\n                {tags}\n            </section>\n        </div>\n    )\n}\n\nexport default Post;\n\n\n","import React, { useState } from 'react';\nimport search from '../assets/search.svg';\nimport { toHexColor } from '../util';\n\nfunction SearchBar(props) {\n    const [ inputValue, setInputValue ] = useState(\"\");\n    const [ query, setQuery ] = useState([]);\n\n    const handleOnChange = (e) => {\n        // TODO: perhaps break at new tags? actually use query?\n        setInputValue(e.target.value);\n    }\n\n    const tags = query.map((tag, i) => {\n        const text = tag.substring(1);\n        return (\n            <span \n                key={i}\n                className='tag' \n                style={{backgroundColor: toHexColor(text)}}\n            >\n                {tag}\n            </span>\n        );\n    });\n\n    return (\n        <div className='search'>\n            {tags}\n            <input\n                value={inputValue}\n                placeholder=\"Search by title or by tags by prepending #...\"\n                onChange={handleOnChange}\n                onKeyUp={() => props.setFilter(inputValue)}\n            />\n            <img \n                src={search}\n                className='search-btn'\n                onClick={() => props.setFilter(inputValue)}\n            />\n        </div>\n    )\n}\n\nexport default SearchBar;","import React, { useState } from 'react';\nimport save from '../assets/save.svg';\nimport edit from '../assets/edit.svg';\nimport cancel from '../assets/cancel.svg';\n\nfunction Profile(props) {\n    const [ value, setValue ] = useState(props.discord || \"\");\n    const [ editting, setEditting ] = useState(false);\n\n    const discord = (\n        <span className='profile-discord'>\n            {editting \n                ? (<>\n                    <input\n                        value={value}\n                        onChange={e => setValue(e.target.value)}\n                        placeholder=\"Set discord username\"\n                        className=\"profile-discord_input\"\n                    />\n                    <img\n                        src={save}\n                        onClick={()=> {alert(\"saved discord username\"); setEditting(false)}}\n                    />\n                    <img\n                        src={cancel}\n                        onClick={()=> setEditting(false)}\n                    />\n                    </>\n                ) : (\n                    <>\n                    <label\n                        value={value}\n                        className=\"profile-discord_input\"\n                    >\n                        {props.discord || \"Set discord username\"}\n                    </label>\n                    <img\n                        src={edit}\n                        onClick={()=> setEditting(true)}\n                    />\n\n                    </>\n                )\n            }\n        </span>\n    );\n     \n\n    return (\n        <div className='profile'>\n            <div className='profile-avatar'></div>\n            <section>\n                <h2 className='profile-name'>\n                    {props.fullname || props.username}\n                </h2>\n                {discord}\n            </section>  \n        </div>\n    )\n}\n\nexport default Profile;","export const getUserPosts = async (user, proxyUrl) => {\n  try {\n    if (user) {\n      const { avatar_url, login, id } = user;\n      const params = `?ghUsername=${login}&githubId=${id}&avatarUrl=${avatar_url}`;\n      const response = await fetch(`${proxyUrl}/user-posts${params}`);\n      const posts = await response.json();\n      return posts;\n    }\n    return [];\n  } catch (error) {\n    console.error(error);\n    return [];\n  }\n};\nexport const initialState = {\n  isLoggedIn: JSON.parse(localStorage.getItem(\"isLoggedIn\")) || false,\n  user: JSON.parse(localStorage.getItem(\"user\")) || null,\n  client_id: process.env.REACT_APP_CLIENT_ID,\n  redirect_uri: process.env.REACT_APP_REDIRECT_URI,\n  client_secret: process.env.REACT_APP_CLIENT_SECRET,\n  proxy_url: process.env.REACT_APP_PROXY_URL,\n  dbUser: {},\n  posts: [],\n};\n\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case \"LOGIN\": {\n      localStorage.setItem(\n        \"isLoggedIn\",\n        JSON.stringify(action.payload.isLoggedIn)\n      );\n      localStorage.setItem(\"user\", JSON.stringify(action.payload.user));\n      return {\n        ...state,\n        isLoggedIn: action.payload.isLoggedIn,\n        user: action.payload.user,\n      };\n    }\n    case \"LOGOUT\": {\n      localStorage.clear();\n      return { ...state, isLoggedIn: false, user: null };\n    }\n    case \"POSTS\": {\n      return {\n        ...state,\n        posts: action.payload.posts,\n        dbUser: action.payload.dbUser,\n      };\n    }\n    default:\n      return state;\n  }\n};\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { AuthContext } from \"../App\";\nimport Post from \"./Post\";\nimport SearchBar from \"./SearchBar\";\nimport Profile from \"./Profile\";\nimport \"../styles/App.scss\";\nimport Masonry from \"react-masonry-css\";\nimport { masonryBreakpoints } from \"../constants\";\nimport { getUserPosts } from \"../store/reducer/index\";\n\nexport default function Home() {\n  const [filter, setFilter] = useState(\"\");\n  const { state, dispatch } = useContext(AuthContext);\n\n  useEffect(() => {\n    async function fetchData() {\n      const { dbUser, posts } = await getUserPosts(state.user, state.proxy_url);\n      dispatch({\n        type: \"POSTS\",\n        payload: { posts, dbUser },\n      });\n    }\n    fetchData();\n  }, []);\n\n  if (!state.isLoggedIn) {\n    return <Redirect to=\"/login\" />;\n  }\n\n  const { posts, user } = state;\n  const {\n    login: username,\n    id: githubId,\n    avatar_url: avatarUrl,\n    name: fullname,\n  } = user;\n  const handleLogout = () => {\n    dispatch({\n      type: \"LOGOUT\",\n    });\n  };\n\n  const allPosts = posts\n    .filter((post) => {\n      if (filter.startsWith(\"#\")) {\n        return post.tags.find((tag) => (\"#\" + tag).startsWith(filter));\n      }\n      return post.title.toLowerCase().includes(filter.toLowerCase());\n    })\n    .map((post) => <Post {...post} />);\n\n  return (\n    <div className=\"home-container\">\n      <button className=\"logout-btn\" onClick={handleLogout}>\n        Logout\n      </button>\n      <div className=\"header\">\n        <Profile {...{ githubId, username, avatarUrl, fullname }} />\n        <SearchBar setFilter={setFilter} />\n      </div>\n      <Masonry\n        className=\"my-masonry-grid posts\"\n        columnClassName=\"my-masonry-grid_column\"\n        breakpointCols={masonryBreakpoints}\n      >\n        {allPosts}\n      </Masonry>\n    </div>\n  );\n}\n","import React, { useState, useEffect, useContext } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { AuthContext } from \"../App\";\nimport { getUserPosts } from \"../store/reducer/index\";\nimport illustration from \"../assets/illustration.svg\";\nimport \"../styles/login.scss\";\n\nexport default function Login() {\n  const { state, dispatch } = useContext(AuthContext);\n  const [data, setData] = useState({ errorMessage: \"\", isLoading: false });\n\n  const { client_id, redirect_uri } = state;\n\n  useEffect(() => {\n    // After requesting Github access, Github redirects back to your app with a code parameter\n    const url = window.location.href;\n    const hasCode = url.includes(\"?code=\");\n\n    // If Github API returns the code parameter\n    if (hasCode) {\n      const newUrl = url.split(\"?code=\");\n      window.history.pushState({}, null, newUrl[0]);\n      setData({ ...data, isLoading: true });\n\n      const requestData = {\n        client_id: state.client_id,\n        redirect_uri: state.redirect_uri,\n        client_secret: state.client_secret,\n        code: newUrl[1],\n      };\n\n      const proxy_url = state.proxy_url;\n\n      // Use code parameter and other parameters to make POST request to proxy_server\n      fetch(proxy_url, {\n        method: \"POST\",\n        body: JSON.stringify(requestData),\n      })\n        .then((response) => response.json())\n        .then(async (data) => {\n          dispatch({\n            type: \"LOGIN\",\n            payload: { user: data, isLoggedIn: true },\n          });\n          try {\n            const { dbUser, posts } = await getUserPosts(data, proxy_url);\n            dispatch({\n              type: \"POSTS\",\n              payload: { posts, dbUser },\n            });\n          } catch (error) {\n            console.error(error);\n          }\n        })\n        .catch((error) => {\n          setData({\n            isLoading: false,\n            errorMessage: \"Sorry! Login failed\",\n          });\n        });\n    }\n  }, [state, dispatch, data]);\n\n  if (state.isLoggedIn) {\n    return <Redirect to=\"/\" />;\n  }\n\n  return (\n    <div className=\"login\">\n      <div className=\"login-container\">\n        {data.isLoading ? (\n          <div className=\"loader\"></div>\n        ) : (\n          <div className=\"login-btn-container\">\n            <a\n              className=\"login-btn\"\n              href={`https://github.com/login/oauth/authorize?scope=user&client_id=${client_id}&redirect_uri=${redirect_uri}`}\n              onClick={() => {\n                setData({ ...data, errorMessage: \"\" });\n              }}\n            >\n              Login with Github\n            </a>\n            <span className=\"login-btn-error\">{data.errorMessage}</span>\n          </div>\n        )}\n      </div>\n      <div className=\"login-header\">\n        <h1 className=\"login-header_name\">fellowboard</h1>\n        <p className=\"login-header_tagline\">\n          Navigate resources curated by fellows for fellows\n        </p>\n      </div>\n    </div>\n  );\n}\n","import React, { createContext, useReducer } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Home from \"./components/Home\";\nimport Login from \"./components/Login\";\nimport { initialState, reducer } from \"./store/reducer\";\n\n\nexport const AuthContext = createContext();\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  return (\n    <AuthContext.Provider\n      value={{\n        state,\n        dispatch\n      }}\n    >\n    <Router>\n      <Switch>\n        <Route path=\"/login\" component={Login}/>\n        <Route path=\"/\" component={Home}/>\n      </Switch>\n    </Router>\n    </AuthContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}