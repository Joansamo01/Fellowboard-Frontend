{"version":3,"sources":["assets/pin-outline.svg","assets/pin-filled.svg","assets/search.svg","FAKE_DATA.js","constants.js","util.js","components/Post.js","components/SearchBar.js","components/Profile.js","components/Home.js","components/Login.js","store/reducer/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","POSTS","creator","type","tags","title","content","url","description","timestamp","Date","isPublic","id","thumbnails","width","height","USER","githubId","username","fullname","avatarUrl","discord","pinnedPosts","TAG_COLORS","masonryBreakpoints","default","toHexColor","text","hash","i","length","charCodeAt","Post","props","useState","isPinned","setIsPinned","isHovered","setIsHovered","toLowerCase","className","href","target","src","map","tag","key","style","backgroundColor","numDays","date","dateObj","present","differenceInTime","getTime","Math","floor","abs","getDateDifference","onMouseOver","onMouseLeave","onClick","pin_filled","pin_outline","SearchBar","inputValue","setInputValue","query","substring","value","placeholder","onChange","e","search","Profile","Home","useContext","AuthContext","state","dispatch","isLoggedIn","to","user","avatar_url","name","public_repos","followers","following","columnClassName","breakpointCols","post","Login","errorMessage","isLoading","data","setData","client_id","redirect_uri","useEffect","window","location","includes","newUrl","split","history","pushState","requestData","client_secret","code","proxy_url","fetch","method","body","JSON","stringify","then","response","json","payload","catch","error","initialState","parse","localStorage","getItem","process","reducer","action","setItem","console","log","clear","createContext","App","useReducer","Provider","path","component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.bc4d8fbd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pin-outline.7c3df105.svg\";","module.exports = __webpack_public_path__ + \"static/media/pin-filled.8ce1b2c1.svg\";","module.exports = __webpack_public_path__ + \"static/media/search.8d146a4a.svg\";","export const POSTS = [\n    {\n        creator: \"amy-lei\",\n        type: \"text\",\n        tags: [\"sample\", \"hash\", \"tag\",\"kjfna ukcnaca\"],\n        title: \"How to MERN\",\n        content: {\n            url: \"https://github.com/amy-lei/dashboard/pull/7/files\",\n            description: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\",\n        },\n        timestamp: new Date(),\n        isPublic: true,\n    },\n    {\n        creator: \"amy-lei\",\n        type: \"text\",\n        tags: [\"tag1\", \"tag2\", \"tag4\",\"kjfna-ukcnaca\"],\n        title: \"How to MERN\",\n        content: {\n            url: \"https://github.com/amy-lei/dashboard/pull/7/files\",\n            description: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. \",\n        },\n        timestamp: new Date(),\n        isPublic: true,\n    },\n    {\n        creator: \"amy-lei\",\n        type: \"text\",\n        tags: [\"sample\", \"hash\", \"tag\",\"kjfna ukcnaca\"],\n        title: \"How to MERN\",\n        content: {\n            url: \"https://github.com/amy-lei/dashboard/pull/7/files\",\n            description: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\",\n        },\n        timestamp: new Date(),\n        isPublic: true,\n    },\n    {\n        creator: \"amy-lei\",\n        type: \"text\",\n        tags: [\"tag1\", \"tag2\", \"tag4\",\"kjfna-ukcnaca\"],\n        title: \"How to MERN\",\n        content: {\n            url: \"https://github.com/amy-lei/dashboard/pull/7/files\",\n            description: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. \",\n        },\n        timestamp: new Date(),\n        isPublic: true,\n    },\n    {\n        creator: \"amy-lei\",\n        type: \"youtube\",\n        tags: [\"sample\", \"hash\", \"tag\"],\n        title: 'MLH Fellowship: Pallets Live Q&A with David Lord',\n        content: {\n            id: 'VVVCWWFxVFZlTy1vUVcyQWxtWlZqLUZnLjBiSlVyQ09OVmVr',\n            description: 'Live Q&A about Pallets, Python, open source, contributing to and maintaining projects with David Lord!',\n            thumbnails: {\n                url: 'https://i.ytimg.com/vi/0bJUrCONVek/sddefault.jpg',\n                width: 640,\n                height: 480\n              },\n        },\n        timestamp: '2020-06-18T17:42:27Z',\n        isPublic: true,\n    },\n    {\n        creator: \"amy-lei\",\n        type: \"text\",\n        tags: [\"tag1\", \"tag2\", \"tag4\",\"kjfna-ukcnaca\"],\n        title: \"How to MERN\",\n        content: {\n            url: \"https://github.com/amy-lei/dashboard/pull/7/files\",\n            description: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. \",\n        },\n        timestamp: new Date(),\n        isPublic: true,\n    },\n    {\n        creator: \"amy-lei\",\n        type: \"text\",\n        tags: [\"tag1\", \"tag2\", \"tag4\",\"kjfna-ukcnaca\"],\n        title: \"How to MERN\",\n        content: {\n            url: \"https://github.com/amy-lei/dashboard/pull/7/files\",\n            description: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. \",\n        },\n        timestamp: new Date(),\n        isPublic: true,\n    },\n    {\n        creator: \"amy-lei\",\n        type: \"youtube\",\n        tags: [\"sample\", \"hash\", \"tag\"],\n        title: 'MLH Fellowship: Pallets Live Q&A with David Lord',\n        content: {\n            id: 'VVVCWWFxVFZlTy1vUVcyQWxtWlZqLUZnLjBiSlVyQ09OVmVr',\n            description: 'Live Q&A about Pallets, Python, open source, contributing to and maintaining projects with David Lord!',\n            thumbnails: {\n                url: 'https://i.ytimg.com/vi/0bJUrCONVek/sddefault.jpg',\n                width: 640,\n                height: 480\n              },\n        },\n        timestamp: '2020-06-18T17:42:27Z',\n        isPublic: true,\n    },\n];\n\nexport const USER = {\n    githubId: \"123456\",\n    username: \"amy-lei\",\n    fullname: \"Amy Lei\",\n    avatarUrl: \"\",\n    discord: null,\n    pinnedPosts: POSTS,\n}\n","export const TAG_COLORS = [\n    'DC8665',\n    '138085',\n    '544667',\n    'CE7672',\n    'EEB462',\n    '648ECD',\n    '6757C7',\n    '545454',\n    '4A6163',\n    '5BAEA3',\n];\n\nexport const masonryBreakpoints = {\n    default: 3,\n    '1100': 2,\n    '750': 1,\n}","import { TAG_COLORS } from \"./constants\";\n\n/**\n * Given a date, convert to a integer number of days from now.\n * @param {String or Date} date \n */\nexport const getDateDifference = (date) => {\n    let dateObj = date;\n    if (!(date instanceof Date)) {\n        dateObj = new Date(date);\n    }\n    const present = new Date();\n    const differenceInTime = dateObj.getTime() - present.getTime();\n    return Math.floor(Math.abs(differenceInTime) / (1000 * 3600 * 24));\n}\n\n/**\n * Hashes strings to a hexcolor. Followed this guide:\n * https://www.designedbyaturtle.co.uk/convert-string-to-hexidecimal-colour-with-javascript-vanilla/\n *\n * @param {String} text: string to hash  \n */\nexport const toHexColor = (text) => {\n    // convert to int\n    let hash = 0;\n    for (let i = 0; i < text.length; i++) {\n        hash += text.charCodeAt(i) + i; // just so order matters\n    }\n\n    hash = hash % TAG_COLORS.length; // get it in range\n    hash = (hash + TAG_COLORS.length) % TAG_COLORS.length; // keep it positive\n    return '#' + TAG_COLORS[hash];\n}","import React, { useState } from 'react';\nimport { getDateDifference, toHexColor } from '../util';\nimport pin_outline from '../assets/pin-outline.svg'; \nimport pin_filled from '../assets/pin-filled.svg'; \n\nfunction Post(props) {\n    const [ isPinned, setIsPinned ] = useState(false); // MADE INTO A STATE FOR TESTING\n    const [ isHovered, setIsHovered ] = useState(isPinned);\n\n    let content;\n    switch(props.type.toLowerCase()) {\n        case \"discord\":\n        case \"text\":\n            content = (\n                <div className='post-body_content text'>\n                    {\"link\" in props.content \n                        && (\n                        <>\n                            &#128279;  \n                            <a href={props.content.url} target=\"_blank\">\n                                Resource \n                            </a>\n                        </>\n                    )}\n                    <p>\n                        {props.content.description}\n                    </p>\n                </div>\n            )\n            break;\n        case \"youtube\":\n            content = (\n            <div className='post-body_content youtube'>\n                <a href={`https://www.youtube.com/watch?v=${props.content.id}`} target=\"_blank\">\n                    &#128279;  \n                    Video link\n                </a>\n                <img \n                    className='post-body_thumbnail' \n                    src={props.content.thumbnails.url}\n                /> \n            </div>\n            );\n            break;\n        default:\n            break; // TODO: account for discord\n    }\n\n    const tags = props.tags.map((tag, i) => \n        <span \n            key={i}\n            className='tag' \n            style={{backgroundColor: toHexColor(tag)}}\n        >\n            {`#${tag}`}\n        </span>\n    );\n\n    let timestamp;\n    const numDays = getDateDifference(props.timestamp);\n    if (numDays === 0) {\n        timestamp = \"today\";\n    } else if (numDays === 1) {\n        timestamp = \"yesterday\";\n    } else {\n        timestamp = numDays + \" days ago\";\n    }\n\n    return (\n        <div \n            className='post'\n            onMouseOver={() => setIsHovered(true)}\n            onMouseLeave={() => setIsHovered(false)}\n        >\n            {(isHovered || isPinned) && (\n                <img \n                    onClick={() => setIsPinned(!isPinned)}\n                    className='post-pin' \n                    src={isPinned ? pin_filled : pin_outline}\n                />\n            )}\n            <section className='post-body'>\n                <div className='post-body_header'>\n                    <h3 className='title'>\n                        {props.title}\n                    </h3>\n                    <label className='creator'>\n                        Shared by {props.creator}\n                    </label>\n                    <label className='time'>\n                        Posted {timestamp}\n                    </label>\n                </div>\n                {content}\n            </section>\n            <section className='post-tags'>\n                {tags}\n            </section>\n        </div>\n    )\n}\n\nexport default Post;\n\n\n","import React, { useState } from 'react';\nimport search from '../assets/search.svg';\nimport { toHexColor } from '../util';\n\nfunction SearchBar(props) {\n    const [ inputValue, setInputValue ] = useState(\"\");\n    const [ query, setQuery ] = useState([]);\n\n    const handleOnChange = (e) => {\n        // TODO: perhaps break at new tags? actually use query?\n        setInputValue(e.target.value);\n    }\n\n    const tags = query.map((tag, i) => {\n        const text = tag.substring(1);\n        return (\n            <span \n                key={i}\n                className='tag' \n                style={{backgroundColor: toHexColor(text)}}\n            >\n                {tag}\n            </span>\n        );\n    });\n\n    return (\n        <div className='search'>\n            {tags}\n            <input\n                value={inputValue}\n                placeholder=\"Search by title or by tags by prepending #...\"\n                onChange={handleOnChange}\n            />\n            <img src={search}/>\n        </div>\n    )\n}\n\nexport default SearchBar;","import React, { useState } from 'react';\n\nfunction Profile(props) {\n    return (\n        <div className='profile'>\n            <div className='profile-avatar'></div>\n            <section>\n                <h2 className='profile-name'>\n                    {props.fullname || props.username}\n                </h2>\n                <span className='profile-discord'>\n                    {props.discord || \"Please enter your discord username\"}\n                </span>\n            </section>  \n        </div>\n    )\n}\n\nexport default Profile;","import React, { useContext } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { AuthContext } from \"../App\";\nimport { POSTS, USER } from '../FAKE_DATA';\nimport Post from './Post';\nimport SearchBar from './SearchBar';\nimport Profile from './Profile';\nimport '../styles/App.scss';\nimport Masonry from \"react-masonry-css\";\nimport { masonryBreakpoints } from \"../constants\";\nimport \"../styles/GitHubHome.css\";\n\nexport default function Home() {\n  const { state, dispatch } = useContext(AuthContext);\n\n  if (!state.isLoggedIn) {\n    return <Redirect to=\"/login\" />;\n  }\n\n  const { avatar_url, name, public_repos, followers, following } = state.user;\n\n  const handleLogout = () => {\n    dispatch({\n      type: \"LOGOUT\",\n    });\n  };\n\n  return (\n    <div className=\"home-container\">\n      <button onClick={handleLogout}>Logout</button>\n      <Profile {...USER} />\n          <SearchBar/>\n          <Masonry\n            className=\"my-masonry-grid posts\"\n            columnClassName=\"my-masonry-grid_column\"\n              breakpointCols={masonryBreakpoints}\n          >\n              {POSTS.map(post => <Post {...post} />)}\n          </Masonry>\n    </div>\n  );\n}\n","import React, { useState, useEffect, useContext } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { AuthContext } from \"../App\";\nimport \"../styles/Login.css\";\n\nexport default function Login() {\n  const { state, dispatch } = useContext(AuthContext);\n  const [data, setData] = useState({ errorMessage: \"\", isLoading: false });\n\n  const { client_id, redirect_uri } = state;\n\n  useEffect(() => {\n    // After requesting Github access, Github redirects back to your app with a code parameter\n    const url = window.location.href;\n    const hasCode = url.includes(\"?code=\");\n\n    // If Github API returns the code parameter\n    if (hasCode) {\n      const newUrl = url.split(\"?code=\");\n      window.history.pushState({}, null, newUrl[0]);\n      setData({ ...data, isLoading: true });\n\n      const requestData = {\n        client_id: state.client_id,\n        redirect_uri: state.redirect_uri,\n        client_secret: state.client_secret,\n        code: newUrl[1],\n      };\n\n      const proxy_url = state.proxy_url;\n\n      // Use code parameter and other parameters to make POST request to proxy_server\n      fetch(proxy_url, {\n        method: \"POST\",\n        body: JSON.stringify(requestData),\n      })\n        .then((response) => response.json())\n        .then((data) => {\n          dispatch({\n            type: \"LOGIN\",\n            payload: { user: data, isLoggedIn: true },\n          });\n        })\n        .catch((error) => {\n          setData({\n            isLoading: false,\n            errorMessage: \"Sorry! Login failed\",\n          });\n        });\n    }\n  }, [state, dispatch, data]);\n\n  if (state.isLoggedIn) {\n    return <Redirect to=\"/\" />;\n  }\n\n  return (\n    <main>\n      <section className=\"container\">\n        <div>\n          <h1>Welcome</h1>\n          <span>Super amazing app</span>\n          <span>{data.errorMessage}</span>\n          <div className=\"login-container\">\n            {data.isLoading ? (\n              <div className=\"loader-container\">\n                <div className=\"loader\"></div>\n              </div>\n            ) : (\n              <>\n                {\n                  // Link to request GitHub access\n                }\n                <a\n                  className=\"login-link\"\n                  href={`https://github.com/login/oauth/authorize?scope=user&client_id=${client_id}&redirect_uri=${redirect_uri}`}\n                  onClick={() => {\n                    setData({ ...data, errorMessage: \"\" });\n                  }}\n                >\n                  <span>Login with GitHub</span>\n                </a>\n              </>\n            )}\n          </div>\n        </div>\n      </section>\n    </main>\n  );\n}\n","export const initialState = {\n    isLoggedIn: JSON.parse(localStorage.getItem(\"isLoggedIn\")) || false,\n    user: JSON.parse(localStorage.getItem(\"user\")) || null,\n    client_id: process.env.REACT_APP_CLIENT_ID,\n    redirect_uri: process.env.REACT_APP_REDIRECT_URI,\n    client_secret: process.env.REACT_APP_CLIENT_SECRET,\n    proxy_url: process.env.REACT_APP_PROXY_URL\n  };\n  \n  export const reducer = (state, action) => {\n    switch (action.type) {\n      case \"LOGIN\": {\n        localStorage.setItem(\"isLoggedIn\", JSON.stringify(action.payload.isLoggedIn))\n        localStorage.setItem(\"user\", JSON.stringify(action.payload.user))\n        console.log(action.payload.isLoggedIn)\n        return {\n          ...state,\n          isLoggedIn: action.payload.isLoggedIn,\n          user: action.payload.user\n        };\n      }\n      case \"LOGOUT\": {\n        localStorage.clear()\n        return {\n          ...state,\n          isLoggedIn: false,\n          user: null\n        };\n      }\n      default:\n        return state;\n    }\n  };\n  ","import React, { createContext, useReducer } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Home from \"./components/Home\";\nimport Login from \"./components/Login\";\nimport { initialState, reducer } from \"./store/reducer\";\n\n\nexport const AuthContext = createContext();\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  return (\n    <AuthContext.Provider\n      value={{\n        state,\n        dispatch\n      }}\n    >\n    <Router>\n      <Switch>\n        <Route path=\"/login\" component={Login}/>\n        <Route path=\"/\" component={Home}/>\n      </Switch>\n    </Router>\n    </AuthContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}