{"version":3,"sources":["assets/pin-outline.svg","assets/pin-filled.svg","assets/search.svg","assets/save.svg","assets/edit.svg","assets/cancel.svg","constants.js","util.js","components/Post.js","components/SearchBar.js","components/Profile.js","components/AddForm.js","store/reducer/index.js","components/TopButton.js","components/Home.js","components/Login.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TAG_COLORS","masonryBreakpoints","default","toHexColor","text","hash","i","length","charCodeAt","Post","props","content","useContext","AuthContext","state","dispatch","useState","isHovered","setIsHovered","isPinned","pinnedPosts","has","_id","pinPost","a","updatedPins","dbUser","filter","concat","body","fetch","username","method","headers","JSON","stringify","res","json","type","payload","toLowerCase","thumbnail","src","url","className","href","target","description","id","thumbnails","avatar","alt","ContactInfo","icon","pod","mail","location","bio","github_url","timestamp","tags","map","tag","key","style","backgroundColor","numDays","date","dateObj","Date","present","differenceInTime","getTime","Math","floor","abs","getDateDifference","onMouseOver","onMouseLeave","onClick","pin_filled","pin_outline","title","creator","Icon","name","SearchBar","scrollRef","useRef","inputValue","setInputValue","handleScroll","position","window","pageYOffset","current","useEffect","addEventListener","passive","removeEventListener","ref","value","placeholder","onChange","e","onKeyUp","setFilter","search","Profile","discord","setValue","editting","setEditting","setDiscordUsername","status","console","log","save","cancel","edit","avatarUrl","fullname","TagForm","idx","splice","setTags","removeTag","Form","Input","label","charAt","substring","trim","AddForm","formContent","open","setOpen","setType","setContent","isPublic","setIsPublic","isLoading","setIsLoading","showConfirmation","setShowConfirmation","reset","confirmSubmit","post","submit","preventDefault","data","Button","labelPosition","onSubmit","fluid","required","iconPosition","TextArea","Group","widths","Radio","checked","preview","allAssignees","assignee","avatar_url","circular","size","getUserPosts","user","proxyUrl","login","params","response","posts","error","initialState","isLoggedIn","parse","localStorage","getItem","client_id","process","redirect_uri","client_secret","proxy_url","reducer","action","setItem","clear","Array","unshift","TopButton","inverted","color","document","scrollTop","documentElement","Home","useMemo","Set","fetchData","to","githubId","allPosts","startsWith","find","includes","columnClassName","breakpointCols","Login","errorMessage","setData","newUrl","split","history","pushState","requestData","code","then","catch","createContext","App","useReducer","Provider","path","component","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.bdd1f538.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pin-outline.7c3df105.svg\";","module.exports = __webpack_public_path__ + \"static/media/pin-filled.8ce1b2c1.svg\";","module.exports = __webpack_public_path__ + \"static/media/search.8d146a4a.svg\";","module.exports = __webpack_public_path__ + \"static/media/save.2f36ebaa.svg\";","module.exports = __webpack_public_path__ + \"static/media/edit.b5e1292a.svg\";","module.exports = __webpack_public_path__ + \"static/media/cancel.2040f220.svg\";","export const TAG_COLORS = [\n    '0F2E4C',\n    '39B995',\n    'F7B929',\n    '1C529E',\n    '263546',\n    'FED330',\n    'DB3A34',\n    '14B5B0',\n];\n\nexport const masonryBreakpoints = {\n    default: 3,\n    '1100': 2,\n    '750': 1,\n}","import { TAG_COLORS } from \"./constants\";\n\n/**\n * Given a date, convert to a integer number of days from now.\n * @param {String or Date} date \n */\nexport const getDateDifference = (date) => {\n    let dateObj = date;\n    if (!(date instanceof Date)) {\n        dateObj = new Date(date);\n    }\n    const present = new Date();\n    const differenceInTime = dateObj.getTime() - present.getTime();\n    return Math.floor(Math.abs(differenceInTime) / (1000 * 3600 * 24));\n}\n\n/**\n * Hashes strings to a hexcolor. Chosen from a predetermined list of colors.\n *\n * @param {String} text: string to hash  \n */\nexport const toHexColor = (text) => {\n    // convert to int\n    let hash = 0;\n    for (let i = 0; i < text.length; i++) {\n        hash += text.charCodeAt(i) + i; // just so order matters\n    }\n\n    hash = hash % TAG_COLORS.length; // get it in range\n    hash = (hash + TAG_COLORS.length) % TAG_COLORS.length; // keep it positive\n    return '#' + TAG_COLORS[hash];\n}","import React, { useState, useContext } from 'react';\nimport { getDateDifference, toHexColor } from '../util';\nimport pin_outline from '../assets/pin-outline.svg'; \nimport pin_filled from '../assets/pin-filled.svg'; \nimport { Icon } from \"semantic-ui-react\";\nimport { AuthContext } from \"../App\";\n\nfunction Post(props) {\n    const { state, dispatch } = useContext(AuthContext);\n    const [ isHovered, setIsHovered ] = useState(false);\n    const isPinned = props.pinnedPosts.has(props._id);\n    \n    const pinPost = async () => {\n        /**\n         * Update passed pin to be opposite of its current pin state\n         */\n        const updatedPins = isPinned \n            ? state.dbUser.pinnedPosts.filter(_id =>  _id !== props._id)\n            : state.dbUser.pinnedPosts.concat(props._id)\n        const body = {\n            pinnedPosts: updatedPins,\n        }\n        const res = await fetch(`/api/users/${state.dbUser.username}/pins`, {\n            method: 'POST',\n            headers: { 'Content-type': 'application/json'},\n            body: JSON.stringify(body),\n        });\n        const updatedUser = await res.json();\n        dispatch({\n            type: 'UPDATE_PINS',\n            payload: updatedPins,\n        });\n    }\n\n    let content;\n    const { type } = props;\n    switch(type.toLowerCase()) {\n        case \"discord\":\n        case \"text\":\n            let thumbnail;\n            if (type === 'discord') {\n                thumbnail = (\n                    <img\n                        src={props.content.thumbnail.url}\n                        className='post-body_thumbnail'\n                    />\n                );\n            }\n            content = (\n            <>\n                <div className='post-body_content text'>\n                    {\"url\" in props.content \n                        && (\n                        <>\n                            &#128279;  \n                            <a href={props.content.url} target=\"_blank\">\n                                Resource \n                            </a>\n                        </>\n                    )}\n                    <p>\n                        {props.content.description}\n                    </p>\n                </div>\n                {thumbnail}\n            </>\n            )\n            break;\n        case \"youtube\":\n            content = (\n            <div className='post-body_content youtube'>\n                <a href={`https://www.youtube.com/watch?v=${props.content.id}`} target=\"_blank\">\n                    &#128279;  \n                    Video link\n                </a>\n                <img \n                    className='post-body_thumbnail' \n                    src={props.content.thumbnails.url}\n                /> \n            </div>\n            );\n            break;\n        case \"contacts\":\n            content = (\n                <div className='post-body_content contacts'>\n                    <img\n                        className='post-body_content-avatar'\n                        src={props.content.avatar}\n                        alt='Avatar'\n                    />\n                    <div className='post-body_content-bio'>\n                        <ContactInfo \n                            icon={'user'} \n                            text={`${props.content.username} | ${props.content.pod}`}\n                        />\n                        <ContactInfo \n                            icon={'mail'} \n                            text={props.content.mail}\n                        />\n                        <ContactInfo icon={'location arrow'} text={props.content.location}/>\n                        <span>{props.content.bio}</span>\n                        <a href={props.content.github_url}>&#128279; Github Profile</a>\n                    </div>\n                </div>\n            );\n            break;\n        default:\n            break; // TODO: account for discord\n    }\n\n    const tags = props.tags.map((tag, i) => \n        <span \n            key={i}\n            className='tag' \n            style={{backgroundColor: toHexColor(tag)}}\n        >\n            {`#${tag}`}\n        </span>\n    );\n\n    let timestamp;\n    const numDays = getDateDifference(props.timestamp);\n    if (numDays === 0) {\n        timestamp = \"today\";\n    } else if (numDays === 1) {\n        timestamp = \"yesterday\";\n    } else {\n        timestamp = numDays + \" days ago\";\n    }\n\n    return (\n        <div \n            className='post'\n            onMouseOver={() => setIsHovered(true)}\n            onMouseLeave={() => setIsHovered(false)}\n        >\n            {(isHovered || isPinned) && (\n                <img \n                    onClick={pinPost}\n                    className='post-pin' \n                    src={isPinned ? pin_filled : pin_outline}\n                />\n            )}\n            <section className='post-body'>\n                <div className='post-body_header'>\n                    <h3 className='title'>\n                        {props.title}\n                    </h3>\n                    {props.type !== 'contacts'\n                        &&\n                        (<label className='creator'>\n                            Shared by {props.creator === 'server' ? 'Team GARY': props.creator}\n                        </label>)\n                    }\n                    <label className='time'>\n                        Posted {timestamp}\n                    </label>\n                </div>\n                {content}\n            </section>\n            <section className='post-tags'>\n                {tags}\n            </section>\n        </div>\n    )\n}\n\nexport default Post;\n\n\nfunction ContactInfo(props) {\n    const { icon, text } = props;\n    if (!text) {\n        return <></>;\n    }\n    \n    return (\n        <div className={`contact-info ${icon === 'user' ? 'name' : ''}`}>\n            <Icon name={icon}/>\n            {text}\n        </div>\n    );\n}","import React, { useState, useEffect, useRef } from 'react';\nimport search from '../assets/search.svg';\n\nfunction SearchBar(props) {\n    const scrollRef = useRef(null);\n    const [ inputValue, setInputValue ] = useState(\"\");\n\n    const handleScroll = () => {\n        const position = window.pageYOffset;\n        if (position < 300) {\n            scrollRef.current.className = 'search';\n        } else if (position >= 100) {\n            scrollRef.current.className = 'search fixed';\n        }\n    };\n\n    useEffect(() => {\n        window.addEventListener('scroll', handleScroll, { passive: true });\n    \n        return () => {\n            window.removeEventListener('scroll', handleScroll);\n        };\n    }, []);\n\n    const handleOnChange = (e) => {\n        // TODO: perhaps break at new tags? actually use query?\n        setInputValue(e.target.value);\n    }\n\n\n    return (\n        <div ref={scrollRef} className='search'>\n            <input\n                value={inputValue}\n                placeholder=\"Search by title or by tags by prepending #...\"\n                onChange={handleOnChange}\n                onKeyUp={() => props.setFilter(inputValue)}\n            />\n            <img \n                src={search}\n                className='search-btn'\n                onClick={() => props.setFilter(inputValue)}\n            />\n        </div>\n    )\n}\n\nexport default SearchBar;","import React, { useState, useContext } from 'react';\nimport save from '../assets/save.svg';\nimport edit from '../assets/edit.svg';\nimport cancel from '../assets/cancel.svg';\nimport { AuthContext } from '../App';\n\nfunction Profile(props) {\n    const {state, dispatch} = useContext(AuthContext);\n    const [ value, setValue ] = useState(props.discord || \"\");\n    const [ editting, setEditting ] = useState(false);\n\n    \n    const setDiscordUsername = async (username) => {\n        try {\n            const body = {\n                \"discord\": username\n            };\n            const res = await fetch(`/api/users/${state.dbUser.username}`, {\n                method: 'POST',\n                headers: { \"Content-type\": \"application/json\" },\n                body: JSON.stringify(body)\n            });\n            const data = await res.json();\n            if (res.status === 200) {\n                setEditting(false);\n                setValue(username);\n                dispatch({\n                    type: 'UPDATE_DISCORD',\n                    payload: {discord: username}\n                });\n            }\n            \n        } catch (err) {\n            console.log(err);\n        }     \n    }\n\n\n    const discord = (\n        <span className='profile-discord'>\n            {editting \n                ? (<>\n                    <input\n                        value={value}\n                        onChange={e => setValue(e.target.value)}\n                        placeholder=\"Set discord username\"\n                        className=\"profile-discord_input\"\n                    />\n                    <img\n                        src={save}\n                        onClick={async () => setDiscordUsername(value)}\n                    />\n                    <img\n                        src={cancel}\n                        onClick={()=> setEditting(false)}\n                    />\n                    </>\n                ) : (\n                    <>\n                    <label\n                        value={value}\n                        className=\"profile-discord_input\"\n                    >\n                        {props.discord || \"Set discord username\"}\n                    </label>\n                    <img\n                        src={edit}\n                        onClick={()=> setEditting(true)}\n                    />\n\n                    </>\n                )\n            }\n        </span>\n    );\n     \n\n    return (\n        <div className='profile'>\n            <div className='profile-avatar'>\n                <img className='profile-avatar-img' src={props.avatarUrl} alt=''/>\n            </div>\n            <section>\n                <h2 className='profile-name'>\n                    {props.fullname || props.username}\n                </h2>\n                {discord}\n            </section>  \n        </div>\n    )\n}\n\nexport default Profile;","import React, { useState, useContext } from 'react';\nimport { toHexColor } from '../util';\nimport { \n  Button, \n  Icon, \n  Form,\n} from \"semantic-ui-react\";\nimport { AuthContext } from \"../App\";\nimport { BaseStyles, AvatarStack } from \"@primer/components\";\n\nfunction AddForm() {\n  const { state, dispatch } = useContext(AuthContext);\n\n  const [ open, setOpen ] = useState(false);\n  const [ type, setType ] = useState('');\n  const [ content, setContent ] = useState({});\n  const [ isPublic, setIsPublic ] = useState(true);\n  const [ tags, setTags ] = useState([]);\n  const [ isLoading, setIsLoading ] = useState(false);\n  const [ showConfirmation, setShowConfirmation ] = useState(false);\n\n  const reset = () => {\n    /**\n     * Reset all states\n     */\n    setOpen(false);\n    setType('');\n    setContent({});\n    setTags([]);\n    setIsPublic(false);\n    setIsLoading(false);\n    setShowConfirmation(false);\n  }\n\n  const confirmSubmit = async () => {\n    const body = {...content};\n    body.isPublic = isPublic;\n    if ('tags' in body)\n    body.tags = body.tags.concat(tags);\n    const res = await fetch('/api/posts', {\n      method: 'POST',\n      headers: { \"Content-type\": \"application/json\" },\n      body: JSON.stringify(body),\n    });\n    \n    const post = await res.json();\n\n    dispatch({\n      type: 'ADD_POST',\n      payload: { post },\n    });\n\n    reset();\n  }\n\n  const submit = async (e) => {\n    /**\n     * In the case of a text post, make a POST request to backend to add to DB.\n     * Otherwise, make a POST request to confirm the link.  `confirmPost` will\n     * submit be responsible for making the request for creating the post.\n     */\n    e.preventDefault();\n    let body;\n    let res;\n    switch(type) {\n      case 'text':\n        body = {\n          type,\n          tags,\n          isPublic,\n          title: content.title,\n          content: {\n            description: content.description || '',\n            url: content.url || '',\n          },\n          creator: state.dbUser.username, // change this to the creator's gh username\n        }\n        res = await fetch('/api/posts', {\n          method: 'POST',\n          headers: { \"Content-type\": \"application/json\" },\n          body: JSON.stringify(body),\n        });\n\n        const post = await res.json();\n        dispatch({\n          type: 'ADD_POST',\n          payload: { post },\n        });\n        reset(); // reset all states\n        break;\n      case 'youtube':\n      case 'github':\n        setIsLoading(true);\n        body = {\n          url: content.url,\n          creator: state.dbUser.username,\n        };\n        res = await fetch('/api/posts', {\n          method: 'POST',\n          headers: { \"Content-type\": \"application/json\" },\n          body: JSON.stringify(body),\n        });\n        const data = await res.json();\n        setContent(data); // body of the next PR\n        setIsLoading(false);\n        setShowConfirmation(true);\n        break;\n      default:\n        break;\n    }\n  }\n\n  let formContent;\n  if (type === '') {\n    formContent = (\n      <div className='add-options'>\n          <Button \n            icon\n            labelPosition='left'\n            className='add-options_choice'\n            onClick={() => setType('text')}\n          > \n            <Icon name='sticky note'/>\n            Notes\n          </Button>\n          <Button \n            icon\n            labelPosition='left'\n            className='add-options_choice'\n            onClick={() => setType('youtube')}\n          > \n            <Icon name='youtube'/>\n            Youtube\n          </Button>\n          <Button \n            icon\n            labelPosition='left'\n            className='add-options_choice'\n            onClick={() => setType('github')}\n          > \n            <Icon name='github alternate'/>\n            Github\n          </Button>\n      </div>\n    );\n  } else if (type === 'text'){\n      formContent = (\n        <Form className='add-text' onSubmit={submit}>\n          <h3>\n          <Icon name='sticky note'/>Post new note\n          </h3>            \n          <Form.Input\n            fluid\n            required\n            label=\"Title\"\n            placeholder=\"e.g. Intro to MERN stack\"\n            value={content.title}\n            onChange={(e, {value}) => setContent({ ...content, title: value })}\n          />\n          <Form.Input\n            icon='linkify'\n            iconPosition='left'\n            value={content.url}\n            onChange={(e, {value}) => setContent({ ...content, url: value })}\n            />  \n          <Form.TextArea\n            label='Description'\n            placeholder='e.g. Learn to build and deploy your first MERN project'\n            value={content.description}\n            onChange={(e, {value}) => setContent({ ...content, description: value })}\n          />\n          <TagForm tags={tags} setTags={setTags}/>\n          <Form.Group widths='equal'>\n            <Form.Radio\n              label='Public'\n              checked={isPublic}\n              onChange={(e, {checked}) => setIsPublic(checked)}\n            />\n            \n            <Form.Radio\n              label='Private'\n              checked={!isPublic}\n              onChange={(e, {checked}) => setIsPublic(!checked)}\n            />\n          </Form.Group>\n          <button className='add-form-submit'>\n            Create\n          </button>\n        </Form>\n      );\n    } else if (showConfirmation) {\n      let preview;\n      const { content: data } = content;\n      if (type === 'youtube') {\n        preview = (\n          <>\n            <h3>{content.title}</h3>\n            <img src={data.thumbnails.url}/>\n          </>\n        );\n      } else if (type === 'github') {\n        preview = (\n          <>\n            <h3>{content.title}</h3>\n            <label>{data.creator}</label>\n            <label>{data.state}</label>\n            <p>{data.body}</p>\n            <BaseStyles>\n              <AvatarStack>\n                {data.allAssignees.map((assignee, i) => (\n                  <img alt='assignee' src={assignee.avatar_url}/>\n                ))}\n              </AvatarStack>\n            </BaseStyles>\n          </>\n        )\n      }\n      formContent = (\n        <div className='add-text'>\n          {preview}\n          <button \n            className='add-form_submit'\n            onClick={reset}\n          >\n              Cancel\n          </button>\n          <button \n            className='add-form_submit'\n            onClick={confirmSubmit}\n          >\n              Confirm\n          </button>\n        </div>\n        \n      )\n    } else if (type === 'youtube' || type === 'github') {\n      const title = type === 'youtube' ? 'Post a Youtube Video' : 'Post from Github';\n      formContent = (\n        <Form className='add-text' onSubmit={submit}>\n          <h3><Icon name={type}/>{title}</h3>\n          {isLoading \n            ? (<div className='loader'></div>)\n            :\n            (<>\n              <Form.Input\n                fluid\n                required\n                icon='linkify'\n                iconPosition='left'\n                onChange={(e, {value}) => setContent({...content, url: value})}\n                value={content.url || ''}\n              />\n              \n              <TagForm tags={tags} setTags={setTags}/>\n              <Form.Group widths='equal'>\n                <Form.Radio\n                  label='Public'\n                  checked={isPublic}\n                  onChange={(e, {checked}) => setIsPublic(checked)}\n                />\n                \n                <Form.Radio\n                  label='Private'\n                  checked={!isPublic}\n                  onChange={(e, {checked}) => setIsPublic(!checked)}\n                />\n            </Form.Group>\n              <button className='add-form-submit'>\n                Create\n              </button>\n            </>)\n        }\n        </Form>\n      );\n    } \n\n  return ( \n    <div>\n      <Button\n        circular\n        icon='plus'\n        size='big'\n        className={`add-btn ${open ? 'opened' : 'closed'}`}\n        onClick={() => { setOpen(!open); setType(''); }}\n      />\n      { open && (\n        <div \n          className={`add-form ${open ? 'opened' : 'closed'} ${type}`}\n        >\n          {formContent}\n        </div>\n      )}\n    </div>\n  );\n}\n\nfunction TagForm(props) {\n  const [ value, setValue ] = useState('');\n  \n  // remove tag at given index\n  const removeTag = (idx) => {\n    const tags = [...props.tags];\n    tags.splice(idx, 1);\n    props.setTags(tags);\n  }\n\n  // add tags split by commas\n  const addTag = (e, {value}) => {\n    if (value && value.charAt(value.length - 1) === ',') {\n      const tag = value.substring(0, value.length - 1).trim();\n      props.setTags(props.tags.concat(tag));\n      setValue('');\n    } else {\n      setValue(value);\n    }\n  }\n\n  const tags = props.tags.map((tag, i) => {\n    return (\n      <span \n        key={i}\n        className='tag' \n        style={{backgroundColor: toHexColor(tag)}}\n        onClick={() => removeTag(i)}\n      >\n        {`#${tag}`}\n      </span>\n    )});\n\n  return(\n    <div className='tag-form'>\n      <div className='tag-form_container'>\n        {tags}\n      </div>\n      <Form.Input\n        label='Tags'\n        placeholder='Add a comma to confirm the tag'\n        value={value}\n        onChange={addTag}\n      />\n    </div>\n  )\n}\n\nexport default AddForm;\n","export const getUserPosts = async (user, proxyUrl) => {\n  try {\n    if (user) {\n      const { avatar_url, login, id } = user;\n      const params = `?ghUsername=${login}&githubId=${id}&avatarUrl=${avatar_url}`;\n      const response = await fetch(`${proxyUrl}/user-posts${params}`);\n      const posts = await response.json();\n      return posts;\n    }\n    return [];\n  } catch (error) {\n    console.error(error);\n    return [];\n  }\n};\nexport const initialState = {\n  isLoggedIn: JSON.parse(localStorage.getItem(\"isLoggedIn\")) || false,\n  user: JSON.parse(localStorage.getItem(\"user\")) || null,\n  client_id: process.env.REACT_APP_CLIENT_ID,\n  redirect_uri: process.env.REACT_APP_REDIRECT_URI,\n  client_secret: process.env.REACT_APP_CLIENT_SECRET,\n  proxy_url: process.env.REACT_APP_PROXY_URL,\n  dbUser: {},\n  posts: [],\n};\n\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case \"LOGIN\": {\n      localStorage.setItem(\n        \"isLoggedIn\",\n        JSON.stringify(action.payload.isLoggedIn)\n      );\n      localStorage.setItem(\"user\", JSON.stringify(action.payload.user));\n      return {\n        ...state,\n        isLoggedIn: action.payload.isLoggedIn,\n        user: action.payload.user,\n      };\n    }\n    case \"LOGOUT\": {\n      localStorage.clear();\n      return { ...state, isLoggedIn: false, user: null };\n    }\n    case \"POSTS\": {\n      const { posts, dbUser } = action.payload;\n      return {\n        ...state,\n        posts,\n        dbUser: dbUser instanceof Array ? dbUser[0] : dbUser,\n      };\n    }\n    case \"ADD_POST\": {\n      const posts = [...state.posts];\n      posts.unshift(action.payload.post);\n      return {\n        ...state,\n        posts,\n      };\n    }\n    case \"UPDATE_PINS\": {\n     return {\n       ...state,\n       dbUser: {\n         ...state.dbUser,\n         pinnedPosts: action.payload,\n       }\n     } \n    }\n    case \"UPDATE_DISCORD\": {\n      const dbUser = state.dbUser;\n      dbUser.discord = action.payload.discord;\n      return {\n        ...state,\n        dbUser,\n      };\n    }\n    default:\n      return state;\n  }\n\n};\n","import React from 'react';\r\nimport {Button, Icon} from \"semantic-ui-react\";\r\n\r\nfunction TopButton(props) {\r\n\r\n    const scrollToTop = () => {\r\n        document.body.scrollTop = 0;\r\n        document.documentElement.scrollTop = 0;\r\n    }\r\n    return(\r\n        <div>\r\n            <Button\r\n                    circular\r\n                    icon={<Icon inverted name='arrow up'/>}\r\n                    size='big'\r\n                    color='black'\r\n                    className='scroll-button'\r\n                    onClick={scrollToTop}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TopButton;","import React, { useContext, useEffect, useState, useMemo } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { AuthContext } from \"../App\";\nimport Post from \"./Post\";\nimport SearchBar from \"./SearchBar\";\nimport Profile from \"./Profile\";\nimport \"../styles/App.scss\";\nimport Masonry from \"react-masonry-css\";\nimport { masonryBreakpoints } from \"../constants\";\nimport AddForm from \"./AddForm\";\nimport { getUserPosts } from \"../store/reducer/index\";\nimport TopButton from \"./TopButton\";\n\nexport default function Home() {\n  const [filter, setFilter] = useState(\"\");\n  const { state, dispatch } = useContext(AuthContext);\n  const pinnedPosts = useMemo(() => {\n    return new Set(state.dbUser.pinnedPosts)\n  }, [state.dbUser.pinnedPosts]);\n\n  useEffect(() => {\n    async function fetchData() {\n      const { dbUser, posts } = await getUserPosts(state.user, state.proxy_url);\n      dispatch({\n        type: \"POSTS\",\n        payload: { posts, dbUser },\n      });\n    }\n    fetchData();\n  }, []);\n\n  if (!state.isLoggedIn) {\n    return <Redirect to=\"/login\" />;\n  }\n\n  const { posts, dbUser } = state;\n  const {\n    githubId,\n    username,\n    avatarUrl,\n    fullname,\n    discord\n  } = dbUser;\n  const handleLogout = () => {\n    dispatch({\n      type: \"LOGOUT\",\n    });\n  };\n\n  const allPosts = posts\n    .filter((post) => {\n      if (filter.startsWith(\"#\")) {\n        return post.tags.find((tag) => (\"#\" + tag).startsWith(filter));\n      }\n      return post.title.toLowerCase().includes(filter.toLowerCase());\n    })\n    .map((post, i) => <Post key={i} {...post} pinnedPosts={pinnedPosts} user={dbUser}/>);\n\n  return (\n    <div className=\"home-container\">\n      <button className=\"logout-btn\" onClick={handleLogout}>\n        Logout\n      </button>\n      <div className=\"header\">\n        <Profile {...{ githubId, username, avatarUrl, fullname, discord}} />\n        <SearchBar setFilter={setFilter} />\n      </div>\n      <div className=\"masonry-container\">\n        <Masonry\n          className=\"my-masonry-grid posts\"\n          columnClassName=\"my-masonry-grid_column\"\n          breakpointCols={masonryBreakpoints}\n        >\n          {allPosts}\n        </Masonry>\n      </div>\n      <TopButton/>\n      <AddForm/>\n    </div>\n  );\n}\n","import React, { useState, useEffect, useContext } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { AuthContext } from \"../App\";\nimport { getUserPosts } from \"../store/reducer/index\";\nimport \"../styles/login.scss\";\n\nexport default function Login() {\n  const { state, dispatch } = useContext(AuthContext);\n  const [data, setData] = useState({ errorMessage: \"\", isLoading: false });\n\n  const { client_id, redirect_uri } = state;\n\n  useEffect(() => {\n    // After requesting Github access, Github redirects back to your app with a code parameter\n    const url = window.location.href;\n    const hasCode = url.includes(\"?code=\");\n\n    // If Github API returns the code parameter\n    if (hasCode) {\n      const newUrl = url.split(\"?code=\");\n      window.history.pushState({}, null, newUrl[0]);\n      setData({ ...data, isLoading: true });\n\n      const requestData = {\n        client_id: state.client_id,\n        redirect_uri: state.redirect_uri,\n        client_secret: state.client_secret,\n        code: newUrl[1],\n      };\n\n      const proxy_url = state.proxy_url;\n\n      // Use code parameter and other parameters to make POST request to proxy_server\n      fetch(proxy_url, {\n        method: \"POST\",\n        body: JSON.stringify(requestData),\n      })\n        .then((response) => response.json())\n        .then(async (data) => {\n          dispatch({\n            type: \"LOGIN\",\n            payload: { user: data, isLoggedIn: true },\n          });\n          try {\n            const { dbUser, posts } = await getUserPosts(data, proxy_url);\n            dispatch({\n              type: \"POSTS\",\n              payload: { posts, dbUser },\n            });\n          } catch (error) {\n            console.error(error);\n          }\n        })\n        .catch((error) => {\n          setData({\n            isLoading: false,\n            errorMessage: \"Sorry! Login failed\",\n          });\n        });\n    }\n  }, [state, dispatch, data]);\n\n  if (state.isLoggedIn) {\n    return <Redirect to=\"/\" />;\n  }\n\n  return (\n    <div className=\"login\">\n      <div className=\"login-container\">\n        {data.isLoading ? (\n          <div className=\"loader\"></div>\n        ) : (\n          <div className=\"login-btn-container\">\n            <a\n              className=\"login-btn\"\n              href={`https://github.com/login/oauth/authorize?scope=user&client_id=${client_id}&redirect_uri=${redirect_uri}`}\n              onClick={() => {\n                setData({ ...data, errorMessage: \"\" });\n              }}\n            >\n              Login with Github\n            </a>\n            <span className=\"login-btn-error\">{data.errorMessage}</span>\n          </div>\n        )}\n      </div>\n      <div className=\"login-header\">\n        <h1 className=\"login-header_name\">fellowboard</h1>\n        <p className=\"login-header_tagline\">\n          Navigate resources curated by fellows for fellows\n        </p>\n      </div>\n    </div>\n  );\n}\n","import React, { createContext, useReducer } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Home from \"./components/Home\";\nimport Login from \"./components/Login\";\nimport { initialState, reducer } from \"./store/reducer\";\n\n\nexport const AuthContext = createContext();\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  return (\n    <AuthContext.Provider\n      value={{\n        state,\n        dispatch\n      }}\n    >\n    <Router>\n      <Switch>\n        <Route path=\"/login\" component={Login}/>\n        <Route path=\"/\" component={Home}/>\n      </Switch>\n    </Router>\n    </AuthContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}