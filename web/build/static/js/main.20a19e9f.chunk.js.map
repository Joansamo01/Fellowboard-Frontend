{"version":3,"sources":["assets/pin-outline.svg","assets/pin-filled.svg","assets/search.svg","assets/save.svg","assets/edit.svg","assets/cancel.svg","constants.js","util.js","components/Post.js","components/SearchBar.js","components/Profile.js","components/AddForm.js","store/reducer/index.js","components/Home.js","components/Login.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TAG_COLORS","masonryBreakpoints","default","toHexColor","text","hash","i","length","charCodeAt","Post","props","content","useContext","AuthContext","state","dispatch","useState","isHovered","setIsHovered","isPinned","pinnedPosts","has","_id","pinPost","a","updatedPins","dbUser","filter","concat","body","fetch","username","method","headers","JSON","stringify","res","json","type","payload","toLowerCase","className","href","url","target","description","id","src","thumbnails","timestamp","tags","map","tag","key","style","backgroundColor","numDays","date","dateObj","Date","present","differenceInTime","getTime","Math","floor","abs","getDateDifference","onMouseOver","onMouseLeave","onClick","pin_filled","pin_outline","title","creator","SearchBar","inputValue","setInputValue","query","substring","value","placeholder","onChange","e","onKeyUp","setFilter","search","Profile","discord","setValue","editting","setEditting","setDiscordUsername","status","console","log","save","cancel","edit","fullname","TagForm","idx","splice","setTags","removeTag","Form","Input","label","charAt","trim","AddForm","formContent","open","setOpen","setType","setContent","isPublic","setIsPublic","isLoading","setIsLoading","showConfirmation","setShowConfirmation","reset","confirmSubmit","post","submit","preventDefault","data","Button","icon","labelPosition","Icon","name","onSubmit","fluid","required","iconPosition","TextArea","Group","widths","Radio","checked","preview","allAssignees","assignee","alt","avatar_url","circular","size","getUserPosts","user","proxyUrl","login","params","response","posts","error","initialState","isLoggedIn","parse","localStorage","getItem","client_id","process","redirect_uri","client_secret","proxy_url","reducer","action","setItem","clear","Array","unshift","Home","useMemo","Set","useEffect","fetchData","to","githubId","avatarUrl","allPosts","startsWith","find","includes","columnClassName","breakpointCols","Login","errorMessage","setData","window","location","newUrl","split","history","pushState","requestData","code","then","catch","createContext","App","useReducer","Provider","path","component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.20a19e9f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pin-outline.7c3df105.svg\";","module.exports = __webpack_public_path__ + \"static/media/pin-filled.8ce1b2c1.svg\";","module.exports = __webpack_public_path__ + \"static/media/search.8d146a4a.svg\";","module.exports = __webpack_public_path__ + \"static/media/save.2f36ebaa.svg\";","module.exports = __webpack_public_path__ + \"static/media/edit.b5e1292a.svg\";","module.exports = __webpack_public_path__ + \"static/media/cancel.2040f220.svg\";","export const TAG_COLORS = [\n    '0F2E4C',\n    '39B995',\n    'F7B929',\n    '1C529E',\n    '263546',\n    'FED330',\n    'DB3A34',\n    '14B5B0',\n];\n\nexport const masonryBreakpoints = {\n    default: 3,\n    '1100': 2,\n    '750': 1,\n}","import { TAG_COLORS } from \"./constants\";\n\n/**\n * Given a date, convert to a integer number of days from now.\n * @param {String or Date} date \n */\nexport const getDateDifference = (date) => {\n    let dateObj = date;\n    if (!(date instanceof Date)) {\n        dateObj = new Date(date);\n    }\n    const present = new Date();\n    const differenceInTime = dateObj.getTime() - present.getTime();\n    return Math.floor(Math.abs(differenceInTime) / (1000 * 3600 * 24));\n}\n\n/**\n * Hashes strings to a hexcolor. Chosen from a predetermined list of colors.\n *\n * @param {String} text: string to hash  \n */\nexport const toHexColor = (text) => {\n    // convert to int\n    let hash = 0;\n    for (let i = 0; i < text.length; i++) {\n        hash += text.charCodeAt(i) + i; // just so order matters\n    }\n\n    hash = hash % TAG_COLORS.length; // get it in range\n    hash = (hash + TAG_COLORS.length) % TAG_COLORS.length; // keep it positive\n    return '#' + TAG_COLORS[hash];\n}","import React, { useState, useContext } from 'react';\nimport { getDateDifference, toHexColor } from '../util';\nimport pin_outline from '../assets/pin-outline.svg'; \nimport pin_filled from '../assets/pin-filled.svg'; \nimport { AuthContext } from \"../App\";\n\nfunction Post(props) {\n    const { state, dispatch } = useContext(AuthContext);\n    const [ isHovered, setIsHovered ] = useState(false);\n    const isPinned = props.pinnedPosts.has(props._id);\n    \n    const pinPost = async () => {\n        /**\n         * Update passed pin to be opposite of its current pin state\n         */\n        const updatedPins = isPinned \n            ? state.dbUser.pinnedPosts.filter(_id =>  _id !== props._id)\n            : state.dbUser.pinnedPosts.concat(props._id)\n        const body = {\n            pinnedPosts: updatedPins,\n        }\n        const res = await fetch(`/api/users/${state.dbUser.username}/pins`, {\n            method: 'POST',\n            headers: { 'Content-type': 'application/json'},\n            body: JSON.stringify(body),\n        });\n        const updatedUser = await res.json();\n        dispatch({\n            type: 'UPDATE_PINS',\n            payload: updatedPins,\n        });\n    }\n\n    let content;\n    switch(props.type.toLowerCase()) {\n        case \"discord\":\n        case \"text\":\n            content = (\n                <div className='post-body_content text'>\n                    {\"url\" in props.content \n                        && (\n                        <>\n                            &#128279;  \n                            <a href={props.content.url} target=\"_blank\">\n                                Resource \n                            </a>\n                        </>\n                    )}\n                    <p>\n                        {props.content.description}\n                    </p>\n                </div>\n            )\n            break;\n        case \"youtube\":\n            content = (\n            <div className='post-body_content youtube'>\n                <a href={`https://www.youtube.com/watch?v=${props.content.id}`} target=\"_blank\">\n                    &#128279;  \n                    Video link\n                </a>\n                <img \n                    className='post-body_thumbnail' \n                    src={props.content.thumbnails.url}\n                /> \n            </div>\n            );\n            break;\n        default:\n            break; // TODO: account for discord\n    }\n\n    const tags = props.tags.map((tag, i) => \n        <span \n            key={i}\n            className='tag' \n            style={{backgroundColor: toHexColor(tag)}}\n        >\n            {`#${tag}`}\n        </span>\n    );\n\n    let timestamp;\n    const numDays = getDateDifference(props.timestamp);\n    if (numDays === 0) {\n        timestamp = \"today\";\n    } else if (numDays === 1) {\n        timestamp = \"yesterday\";\n    } else {\n        timestamp = numDays + \" days ago\";\n    }\n\n    return (\n        <div \n            className='post'\n            onMouseOver={() => setIsHovered(true)}\n            onMouseLeave={() => setIsHovered(false)}\n        >\n            {(isHovered || isPinned) && (\n                <img \n                    onClick={pinPost}\n                    className='post-pin' \n                    src={isPinned ? pin_filled : pin_outline}\n                />\n            )}\n            <section className='post-body'>\n                <div className='post-body_header'>\n                    <h3 className='title'>\n                        {props.title}\n                    </h3>\n                    <label className='creator'>\n                        Shared by {props.creator}\n                    </label>\n                    <label className='time'>\n                        Posted {timestamp}\n                    </label>\n                </div>\n                {content}\n            </section>\n            <section className='post-tags'>\n                {tags}\n            </section>\n        </div>\n    )\n}\n\nexport default Post;\n\n\n","import React, { useState } from 'react';\nimport search from '../assets/search.svg';\nimport { toHexColor } from '../util';\n\nfunction SearchBar(props) {\n    const [ inputValue, setInputValue ] = useState(\"\");\n    const [ query, setQuery ] = useState([]);\n\n    const handleOnChange = (e) => {\n        // TODO: perhaps break at new tags? actually use query?\n        setInputValue(e.target.value);\n    }\n\n    const tags = query.map((tag, i) => {\n        const text = tag.substring(1);\n        return (\n            <span \n                key={i}\n                className='tag' \n                style={{backgroundColor: toHexColor(text)}}\n            >\n                {tag}\n            </span>\n        );\n    });\n\n    return (\n        <div className='search'>\n            {tags}\n            <input\n                value={inputValue}\n                placeholder=\"Search by title or by tags by prepending #...\"\n                onChange={handleOnChange}\n                onKeyUp={() => props.setFilter(inputValue)}\n            />\n            <img \n                src={search}\n                className='search-btn'\n                onClick={() => props.setFilter(inputValue)}\n            />\n        </div>\n    )\n}\n\nexport default SearchBar;","import React, { useState, useContext } from 'react';\nimport save from '../assets/save.svg';\nimport edit from '../assets/edit.svg';\nimport cancel from '../assets/cancel.svg';\nimport { AuthContext } from '../App';\n\nfunction Profile(props) {\n    const {state, dispatch} = useContext(AuthContext);\n    const [ value, setValue ] = useState(props.discord || \"\");\n    const [ editting, setEditting ] = useState(false);\n\n    \n    const setDiscordUsername = async (username) => {\n        try {\n            const body = {\n                \"discord\": username\n            };\n            const res = await fetch(`/api/users/${state.dbUser.username}`, {\n                method: 'POST',\n                headers: { \"Content-type\": \"application/json\" },\n                body: JSON.stringify(body)\n            });\n            const data = await res.json();\n            if (res.status === 200) {\n                setEditting(false);\n                setValue(username);\n                dispatch({\n                    type: 'UPDATE_DISCORD',\n                    payload: {discord: username}\n                });\n            }\n            \n        } catch (err) {\n            console.log(err);\n        }     \n    }\n\n\n    const discord = (\n        <span className='profile-discord'>\n            {editting \n                ? (<>\n                    <input\n                        value={value}\n                        onChange={e => setValue(e.target.value)}\n                        placeholder=\"Set discord username\"\n                        className=\"profile-discord_input\"\n                    />\n                    <img\n                        src={save}\n                        onClick={async () => setDiscordUsername(value)}\n                    />\n                    <img\n                        src={cancel}\n                        onClick={()=> setEditting(false)}\n                    />\n                    </>\n                ) : (\n                    <>\n                    <label\n                        value={value}\n                        className=\"profile-discord_input\"\n                    >\n                        {props.discord || \"Set discord username\"}\n                    </label>\n                    <img\n                        src={edit}\n                        onClick={()=> setEditting(true)}\n                    />\n\n                    </>\n                )\n            }\n        </span>\n    );\n     \n\n    return (\n        <div className='profile'>\n            <div className='profile-avatar'></div>\n            <section>\n                <h2 className='profile-name'>\n                    {props.fullname || props.username}\n                </h2>\n                {discord}\n            </section>  \n        </div>\n    )\n}\n\nexport default Profile;","import React, { useState, useContext } from 'react';\nimport { toHexColor } from '../util';\nimport { \n  Button, \n  Icon, \n  Form,\n} from \"semantic-ui-react\";\nimport { AuthContext } from \"../App\";\nimport { BaseStyles, AvatarStack } from \"@primer/components\";\n\nfunction AddForm() {\n  const { state, dispatch } = useContext(AuthContext);\n\n  const [ open, setOpen ] = useState(false);\n  const [ type, setType ] = useState('');\n  const [ content, setContent ] = useState({});\n  const [ isPublic, setIsPublic ] = useState(true);\n  const [ tags, setTags ] = useState([]);\n  const [ isLoading, setIsLoading ] = useState(false);\n  const [ showConfirmation, setShowConfirmation ] = useState(false);\n\n  const reset = () => {\n    /**\n     * Reset all states\n     */\n    setOpen(false);\n    setType('');\n    setContent({});\n    setTags([]);\n    setIsPublic(false);\n    setIsLoading(false);\n    setShowConfirmation(false);\n  }\n\n  const confirmSubmit = async () => {\n    const body = {...content};\n    body.isPublic = isPublic;\n    if ('tags' in body)\n    body.tags = body.tags.concat(tags);\n    const res = await fetch('/api/posts', {\n      method: 'POST',\n      headers: { \"Content-type\": \"application/json\" },\n      body: JSON.stringify(body),\n    });\n    \n    const post = await res.json();\n\n    dispatch({\n      type: 'ADD_POST',\n      payload: { post },\n    });\n\n    reset();\n  }\n\n  const submit = async (e) => {\n    /**\n     * In the case of a text post, make a POST request to backend to add to DB.\n     * Otherwise, make a POST request to confirm the link.  `confirmPost` will\n     * submit be responsible for making the request for creating the post.\n     */\n    e.preventDefault();\n    let body;\n    let res;\n    switch(type) {\n      case 'text':\n        body = {\n          type,\n          tags,\n          isPublic,\n          title: content.title,\n          content: {\n            description: content.description || '',\n            url: content.url || '',\n          },\n          creator: state.dbUser.username, // change this to the creator's gh username\n        }\n        res = await fetch('/api/posts', {\n          method: 'POST',\n          headers: { \"Content-type\": \"application/json\" },\n          body: JSON.stringify(body),\n        });\n\n        const post = await res.json();\n        dispatch({\n          type: 'ADD_POST',\n          payload: { post },\n        });\n        reset(); // reset all states\n        break;\n      case 'youtube':\n      case 'github':\n        setIsLoading(true);\n        body = {\n          url: content.url,\n          creator: state.dbUser.username,\n        };\n        res = await fetch('/api/posts', {\n          method: 'POST',\n          headers: { \"Content-type\": \"application/json\" },\n          body: JSON.stringify(body),\n        });\n        const data = await res.json();\n        setContent(data); // body of the next PR\n        setIsLoading(false);\n        setShowConfirmation(true);\n        break;\n      default:\n        break;\n    }\n  }\n\n  let formContent;\n  if (type === '') {\n    formContent = (\n      <div className='add-options'>\n          <Button \n            icon\n            labelPosition='left'\n            className='add-options_choice'\n            onClick={() => setType('text')}\n          > \n            <Icon name='sticky note'/>\n            Notes\n          </Button>\n          <Button \n            icon\n            labelPosition='left'\n            className='add-options_choice'\n            onClick={() => setType('youtube')}\n          > \n            <Icon name='youtube'/>\n            Youtube\n          </Button>\n          <Button \n            icon\n            labelPosition='left'\n            className='add-options_choice'\n            onClick={() => setType('github')}\n          > \n            <Icon name='github alternate'/>\n            Github\n          </Button>\n      </div>\n    );\n  } else if (type === 'text'){\n      formContent = (\n        <Form className='add-text' onSubmit={submit}>\n          <h3>\n          <Icon name='sticky note'/>Post new note\n          </h3>            \n          <Form.Input\n            fluid\n            required\n            label=\"Title\"\n            placeholder=\"e.g. Intro to MERN stack\"\n            value={content.title}\n            onChange={(e, {value}) => setContent({ ...content, title: value })}\n          />\n          <Form.Input\n            icon='linkify'\n            iconPosition='left'\n            value={content.url}\n            onChange={(e, {value}) => setContent({ ...content, url: value })}\n            />  \n          <Form.TextArea\n            label='Description'\n            placeholder='e.g. Learn to build and deploy your first MERN project'\n            value={content.description}\n            onChange={(e, {value}) => setContent({ ...content, description: value })}\n          />\n          <TagForm tags={tags} setTags={setTags}/>\n          <Form.Group widths='equal'>\n            <Form.Radio\n              label='Public'\n              checked={isPublic}\n              onChange={(e, {checked}) => setIsPublic(checked)}\n            />\n            \n            <Form.Radio\n              label='Private'\n              checked={!isPublic}\n              onChange={(e, {checked}) => setIsPublic(!checked)}\n            />\n          </Form.Group>\n          <button className='add-form-submit'>\n            Create\n          </button>\n        </Form>\n      );\n    } else if (showConfirmation) {\n      let preview;\n      const { content: data } = content;\n      if (type === 'youtube') {\n        preview = (\n          <>\n            <h3>{content.title}</h3>\n            <img src={data.thumbnails.url}/>\n          </>\n        );\n      } else if (type === 'github') {\n        preview = (\n          <>\n            <h3>{content.title}</h3>\n            <label>{data.creator}</label>\n            <label>{data.state}</label>\n            <p>{data.body}</p>\n            <BaseStyles>\n              <AvatarStack>\n                {data.allAssignees.map((assignee, i) => (\n                  <img alt='assignee' src={assignee.avatar_url}/>\n                ))}\n              </AvatarStack>\n            </BaseStyles>\n          </>\n        )\n      }\n      formContent = (\n        <div className='add-text'>\n          {preview}\n          <button \n            className='add-form_submit'\n            onClick={reset}\n          >\n              Cancel\n          </button>\n          <button \n            className='add-form_submit'\n            onClick={confirmSubmit}\n          >\n              Confirm\n          </button>\n        </div>\n        \n      )\n    } else if (type === 'youtube' || type === 'github') {\n      const title = type === 'youtube' ? 'Post a Youtube Video' : 'Post from Github';\n      formContent = (\n        <Form className='add-text' onSubmit={submit}>\n          <h3><Icon name={type}/>{title}</h3>\n          {isLoading \n            ? (<div className='loader'></div>)\n            :\n            (<>\n              <Form.Input\n                fluid\n                required\n                icon='linkify'\n                iconPosition='left'\n                onChange={(e, {value}) => setContent({...content, url: value})}\n                value={content.url || ''}\n              />\n              \n              <TagForm tags={tags} setTags={setTags}/>\n              <Form.Group widths='equal'>\n                <Form.Radio\n                  label='Public'\n                  checked={isPublic}\n                  onChange={(e, {checked}) => setIsPublic(checked)}\n                />\n                \n                <Form.Radio\n                  label='Private'\n                  checked={!isPublic}\n                  onChange={(e, {checked}) => setIsPublic(!checked)}\n                />\n            </Form.Group>\n              <button className='add-form-submit'>\n                Create\n              </button>\n            </>)\n        }\n        </Form>\n      );\n    } \n\n  return ( \n    <div>\n      <Button\n        circular\n        icon='plus'\n        size='big'\n        className={`add-btn ${open ? 'opened' : 'closed'}`}\n        onClick={() => { setOpen(!open); setType(''); }}\n      />\n      { open && (\n        <div \n          className={`add-form ${open ? 'opened' : 'closed'} ${type}`}\n        >\n          {formContent}\n        </div>\n      )}\n    </div>\n  );\n}\n\nfunction TagForm(props) {\n  const [ value, setValue ] = useState('');\n  \n  // remove tag at given index\n  const removeTag = (idx) => {\n    const tags = [...props.tags];\n    tags.splice(idx, 1);\n    props.setTags(tags);\n  }\n\n  // add tags split by commas\n  const addTag = (e, {value}) => {\n    if (value && value.charAt(value.length - 1) === ',') {\n      const tag = value.substring(0, value.length - 1).trim();\n      props.setTags(props.tags.concat(tag));\n      setValue('');\n    } else {\n      setValue(value);\n    }\n  }\n\n  const tags = props.tags.map((tag, i) => {\n    return (\n      <span \n        key={i}\n        className='tag' \n        style={{backgroundColor: toHexColor(tag)}}\n        onClick={() => removeTag(i)}\n      >\n        {`#${tag}`}\n      </span>\n    )});\n\n  return(\n    <div className='tag-form'>\n      <div className='tag-form_container'>\n        {tags}\n      </div>\n      <Form.Input\n        label='Tags'\n        placeholder='Add a comma to confirm the tag'\n        value={value}\n        onChange={addTag}\n      />\n    </div>\n  )\n}\n\nexport default AddForm;\n","export const getUserPosts = async (user, proxyUrl) => {\n  try {\n    if (user) {\n      const { avatar_url, login, id } = user;\n      const params = `?ghUsername=${login}&githubId=${id}&avatarUrl=${avatar_url}`;\n      const response = await fetch(`${proxyUrl}/user-posts${params}`);\n      const posts = await response.json();\n      return posts;\n    }\n    return [];\n  } catch (error) {\n    console.error(error);\n    return [];\n  }\n};\nexport const initialState = {\n  isLoggedIn: JSON.parse(localStorage.getItem(\"isLoggedIn\")) || false,\n  user: JSON.parse(localStorage.getItem(\"user\")) || null,\n  client_id: process.env.REACT_APP_CLIENT_ID,\n  redirect_uri: process.env.REACT_APP_REDIRECT_URI,\n  client_secret: process.env.REACT_APP_CLIENT_SECRET,\n  proxy_url: process.env.REACT_APP_PROXY_URL,\n  dbUser: {},\n  posts: [],\n};\n\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case \"LOGIN\": {\n      localStorage.setItem(\n        \"isLoggedIn\",\n        JSON.stringify(action.payload.isLoggedIn)\n      );\n      localStorage.setItem(\"user\", JSON.stringify(action.payload.user));\n      return {\n        ...state,\n        isLoggedIn: action.payload.isLoggedIn,\n        user: action.payload.user,\n      };\n    }\n    case \"LOGOUT\": {\n      localStorage.clear();\n      return { ...state, isLoggedIn: false, user: null };\n    }\n    case \"POSTS\": {\n      const { posts, dbUser } = action.payload;\n      return {\n        ...state,\n        posts,\n        dbUser: dbUser instanceof Array ? dbUser[0] : dbUser,\n      };\n    }\n    case \"ADD_POST\": {\n      const posts = [...state.posts];\n      posts.unshift(action.payload.post);\n      return {\n        ...state,\n        posts,\n      };\n    }\n    case \"UPDATE_PINS\": {\n     return {\n       ...state,\n       dbUser: {\n         ...state.dbUser,\n         pinnedPosts: action.payload,\n       }\n     } \n    }\n    case \"UPDATE_DISCORD\": {\n      const dbUser = state.dbUser;\n      dbUser.discord = action.payload.discord;\n      return {\n        ...state,\n        dbUser,\n      };\n    }\n    default:\n      return state;\n  }\n\n};\n","import React, { useContext, useEffect, useState, useMemo } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { AuthContext } from \"../App\";\nimport Post from \"./Post\";\nimport SearchBar from \"./SearchBar\";\nimport Profile from \"./Profile\";\nimport \"../styles/App.scss\";\nimport Masonry from \"react-masonry-css\";\nimport { masonryBreakpoints } from \"../constants\";\nimport AddForm from \"./AddForm\";\nimport { getUserPosts } from \"../store/reducer/index\";\n\nexport default function Home() {\n  const [filter, setFilter] = useState(\"\");\n  const { state, dispatch } = useContext(AuthContext);\n  const pinnedPosts = useMemo(() => {\n    return new Set(state.dbUser.pinnedPosts)\n  }, [state.dbUser.pinnedPosts]);\n\n  useEffect(() => {\n    async function fetchData() {\n      const { dbUser, posts } = await getUserPosts(state.user, state.proxy_url);\n      dispatch({\n        type: \"POSTS\",\n        payload: { posts, dbUser },\n      });\n    }\n    fetchData();\n  }, []);\n\n  if (!state.isLoggedIn) {\n    return <Redirect to=\"/login\" />;\n  }\n\n  const { posts, dbUser } = state;\n  const {\n    githubId,\n    username,\n    avatarUrl,\n    fullname,\n    discord\n  } = dbUser;\n  const handleLogout = () => {\n    dispatch({\n      type: \"LOGOUT\",\n    });\n  };\n\n  const allPosts = posts\n    .filter((post) => {\n      if (filter.startsWith(\"#\")) {\n        return post.tags.find((tag) => (\"#\" + tag).startsWith(filter));\n      }\n      return post.title.toLowerCase().includes(filter.toLowerCase());\n    })\n    .map((post, i) => <Post key={i} {...post} pinnedPosts={pinnedPosts} user={dbUser}/>);\n\n  return (\n    <div className=\"home-container\">\n      <div className=\"header-container\">\n        <button className=\"logout-btn\" onClick={handleLogout}>\n          Logout\n        </button>\n        <div className=\"header\">\n          \n          <Profile {...{ githubId, username, avatarUrl, fullname, discord}} />\n          <SearchBar setFilter={setFilter} />\n        </div>\n      </div>\n      <div className=\"masonry-container\">\n        <Masonry\n          className=\"my-masonry-grid posts\"\n          columnClassName=\"my-masonry-grid_column\"\n          breakpointCols={masonryBreakpoints}\n        >\n          {allPosts}\n        </Masonry>\n      </div>\n      <AddForm/>\n    </div>\n  );\n}\n","import React, { useState, useEffect, useContext } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { AuthContext } from \"../App\";\nimport { getUserPosts } from \"../store/reducer/index\";\nimport \"../styles/login.scss\";\n\nexport default function Login() {\n  const { state, dispatch } = useContext(AuthContext);\n  const [data, setData] = useState({ errorMessage: \"\", isLoading: false });\n\n  const { client_id, redirect_uri } = state;\n\n  useEffect(() => {\n    // After requesting Github access, Github redirects back to your app with a code parameter\n    const url = window.location.href;\n    const hasCode = url.includes(\"?code=\");\n\n    // If Github API returns the code parameter\n    if (hasCode) {\n      const newUrl = url.split(\"?code=\");\n      window.history.pushState({}, null, newUrl[0]);\n      setData({ ...data, isLoading: true });\n\n      const requestData = {\n        client_id: state.client_id,\n        redirect_uri: state.redirect_uri,\n        client_secret: state.client_secret,\n        code: newUrl[1],\n      };\n\n      const proxy_url = state.proxy_url;\n\n      // Use code parameter and other parameters to make POST request to proxy_server\n      fetch(proxy_url, {\n        method: \"POST\",\n        body: JSON.stringify(requestData),\n      })\n        .then((response) => response.json())\n        .then(async (data) => {\n          dispatch({\n            type: \"LOGIN\",\n            payload: { user: data, isLoggedIn: true },\n          });\n          try {\n            const { dbUser, posts } = await getUserPosts(data, proxy_url);\n            dispatch({\n              type: \"POSTS\",\n              payload: { posts, dbUser },\n            });\n          } catch (error) {\n            console.error(error);\n          }\n        })\n        .catch((error) => {\n          setData({\n            isLoading: false,\n            errorMessage: \"Sorry! Login failed\",\n          });\n        });\n    }\n  }, [state, dispatch, data]);\n\n  if (state.isLoggedIn) {\n    return <Redirect to=\"/\" />;\n  }\n\n  return (\n    <div className=\"login\">\n      <div className=\"login-container\">\n        {data.isLoading ? (\n          <div className=\"loader\"></div>\n        ) : (\n          <div className=\"login-btn-container\">\n            <a\n              className=\"login-btn\"\n              href={`https://github.com/login/oauth/authorize?scope=user&client_id=${client_id}&redirect_uri=${redirect_uri}`}\n              onClick={() => {\n                setData({ ...data, errorMessage: \"\" });\n              }}\n            >\n              Login with Github\n            </a>\n            <span className=\"login-btn-error\">{data.errorMessage}</span>\n          </div>\n        )}\n      </div>\n      <div className=\"login-header\">\n        <h1 className=\"login-header_name\">fellowboard</h1>\n        <p className=\"login-header_tagline\">\n          Navigate resources curated by fellows for fellows\n        </p>\n      </div>\n    </div>\n  );\n}\n","import React, { createContext, useReducer } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Home from \"./components/Home\";\nimport Login from \"./components/Login\";\nimport { initialState, reducer } from \"./store/reducer\";\n\n\nexport const AuthContext = createContext();\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  return (\n    <AuthContext.Provider\n      value={{\n        state,\n        dispatch\n      }}\n    >\n    <Router>\n      <Switch>\n        <Route path=\"/login\" component={Login}/>\n        <Route path=\"/\" component={Home}/>\n      </Switch>\n    </Router>\n    </AuthContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}